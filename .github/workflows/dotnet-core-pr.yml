name: .NET Pull requests

on:
  pull_request:
    branches: [ master, stable, angular13 ]
    paths-ignore:
    - '**.md'
    - '.github/**'

jobs:
  backend-pn-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        path: main
    - uses: actions/checkout@v3
      with:
        path: main
    - name: 'Preparing Frontend checkout'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: microting/eform-angular-frontend
        ref: stable
        path: eform-angular-frontend
    - name: 'Preparing items planning checkout'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: microting/eform-angular-items-planning-plugin
        ref: stable
        path: eform-angular-items-planning-plugin
    - name: 'Preparing workflow checkout'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: microting/eform-angular-workflow-plugin
        ref: stable
        path: eform-angular-workflow-plugin
    - name: 'Preparing backend configuration checkout'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: microting/eform-backendconfiguration-plugin
        ref: stable
        path: eform-backendconfiguration-plugin
    - name: 'Preparing time planning checkout'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: microting/eform-angular-timeplanning-plugin
        ref: stable
        path: eform-angular-timeplanning-plugin
    - name: 'Preparing greate belt checkout'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: microting/eform-angular-greate-belt-plugin
        ref: stable
        path: eform-angular-greate-belt-plugin
    - name: Copy dependencies
      run: |
        cp -av eform-angular-items-planning-plugin/eform-client/src/app/plugins/modules/items-planning-pn eform-angular-frontend/eform-client/src/app/plugins/modules/items-planning-pn
        cp -av eform-angular-timeplanning-plugin/eform-client/src/app/plugins/modules/time-planning-pn eform-angular-frontend/eform-client/src/app/plugins/modules/time-planning-pn
        cp -av eform-backendconfiguration-plugin/eform-client/src/app/plugins/modules/backend-configuration-pn eform-angular-frontend/eform-client/src/app/plugins/modules/backend-configuration-pn
        mkdir -p eform-angular-frontend/eFormAPI/eFormAPI.Web/Plugins
        cd eform-angular-frontend/eform-client && ../../eform-angular-items-planning-plugin/testinginstallpn.sh
        ../../eform-angular-timeplanning-plugin/testinginstallpn.sh
        ../../eform-backendconfiguration-plugin/testinginstallpn.sh
    - name: Get the version release
      id: get_release_version
      run: echo ::set-output name=VERSION::$(cd main && git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(cd eform-angular-items-planning-plugin && git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Get the work flow version
      id: get_plugin3_version
      run: echo ::set-output name=PLUGIN3VERSION::$(cd eform-angular-workflow-plugin && git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Get the backend configuration version
      id: get_plugin4_version
      run: echo ::set-output name=PLUGIN4VERSION::$(cd eform-backendconfiguration-plugin && git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Get the time planning version
      id: get_plugin5_version
      run: echo ::set-output name=PLUGIN5VERSION::$(cd eform-angular-timeplanning-plugin && git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Get the greate belt version
      id: get_plugin6_version
      run: echo ::set-output name=PLUGIN6VERSION::$(cd eform-angular-greate-belt-plugin && git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Get the frontend version
      id: get_frontend_version
      run: echo ::set-output name=FRONTENDVERSION::$(cd eform-angular-frontend && git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Copy frontendfiles
      run: cp main/Dockerfile .
    - name: Build the tagged Docker image
      run: docker build . -t microtingas/work-items-planning-container:latest -t microtingas/work-items-planning-container:${{ steps.get_release_version.outputs.VERSION }} --build-arg GITVERSION=${{ steps.get_frontend_version.outputs.FRONTENDVERSION }} --build-arg PLUGINVERSION=${{ steps.get_version.outputs.VERSION }} --build-arg PLUGIN2VERSION=${{ steps.get_plugin_version.outputs.PLUGIN2VERSION }} --build-arg PLUGIN3VERSION=${{ steps.get_plugin3_version.outputs.PLUGIN3VERSION }} --build-arg PLUGIN4VERSION=${{ steps.get_plugin4_version.outputs.PLUGIN4VERSION }} --build-arg PLUGIN5VERSION=${{ steps.get_plugin5_version.outputs.PLUGIN5VERSION }} --build-arg PLUGIN6VERSION=${{ steps.get_plugin6_version.outputs.PLUGIN6VERSION }}
    - name: Tag builds
      run: |-
        docker tag microtingas/work-items-planning-container:latest microtingas/work-items-planning-container:latest
    - run: docker save microtingas/work-items-planning-container:latest -o work-items-planning-container.tar
    - uses: actions/upload-artifact@v2
      with:
        name: work-items-planning-container
        path: work-items-planning-container.tar        
  backend-pn-test:
    needs: backend-pn-build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test: [a,b,c,d]
    steps:
    - uses: actions/checkout@v3
      with:
        path: main
    - uses: actions/download-artifact@v3
      with:
        name: work-items-planning-container
    - run: docker load -i work-items-planning-container.tar
    - name: Create docker network ðŸ–§
      run: docker network create --driver bridge --attachable data
    - name: Start MariaDB
      run: |
        docker pull mariadb:10.8
        docker run --name mariadbtest --network data -e MYSQL_ROOT_PASSWORD=secretpassword -p 3306:3306 -d mariadb:10.8
    - name: Start rabbitmq
      run: |
        docker pull rabbitmq:latest
        docker run -d --hostname my-rabbit --name some-rabbit --network data -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=password rabbitmq:latest
    - name: Start the newly build Docker container
      id: docker-run
      run: docker run --name my-container -p 4200:5000 --network data microtingas/work-items-planning-container:latest "/ConnectionString=host=mariadbtest;Database=420_Angular;user=root;password=secretpassword;port=3306;Convert Zero Datetime = true;SslMode=none;" > docker_run_log 2>&1 &
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.12.1'
    - name: 'Preparing Frontend checkout'
      uses: actions/checkout@v3
      with:
        repository: microting/eform-angular-frontend
        ref: stable
        path: eform-angular-frontend
    - name: 'Preparing bacend checkout'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: microting/eform-backendconfiguration-plugin
        ref: stable
        path: eform-backendconfiguration-plugin
    - name: Cache node_modules
      id: cache
      uses: actions/cache@v3
      with:
        path: eform-angular-frontend/eform-client/node_modules
        key: ${{ runner.os }}-build-${{ hashFiles('eform-angular-frontend/eform-client/package.json') }}
        restore-keys: |
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Copy dependencies
      run: |
        #cp -av eform-angular-items-planning-plugin/eform-client/src/app/plugins/modules/items-planning-pn eform-angular-frontend/eform-client/src/app/plugins/modules/items-planning-pn
        #cp -av eform-angular-timeplanning-plugin/eform-client/src/app/plugins/modules/time-planning-pn eform-angular-frontend/eform-client/src/app/plugins/modules/time-planning-pn
        cp -av eform-backendconfiguration-plugin/eform-client/src/app/plugins/modules/backend-configuration-pn eform-angular-frontend/eform-client/src/app/plugins/modules/backend-configuration-pn
        cp -av eform-backendconfiguration-plugin/eform-client/e2e/Tests/backend-configuration-settings eform-angular-frontend/eform-client/e2e/Tests/backend-configuration-settings
        cp -av eform-backendconfiguration-plugin/eform-client/e2e/Tests/backend-configuration-general eform-angular-frontend/eform-client/e2e/Tests/backend-configuration-general
        cp -av eform-backendconfiguration-plugin/eform-client/e2e/Page\ objects/BackendConfiguration eform-angular-frontend/eform-client/e2e/Page\ objects/BackendConfiguration
        #cp -av eform-angular-items-planning-plugin/eform-client/e2e/Page\ objects/ItemsPlanning eform-angular-frontend/eform-client/e2e/Page\ objects/ItemsPlanning
        cp -av eform-backendconfiguration-plugin/eform-client/wdio-headless-plugin-step2${{matrix.test}}.conf.js eform-angular-frontend/eform-client/wdio-headless-plugin-step2${{matrix.test}}.conf.js
        cp -av eform-backendconfiguration-plugin/eform-client/wdio-plugin-step2.conf.js eform-angular-frontend/eform-client/wdio-plugin-step2.conf.js
        #mkdir -p eform-angular-frontend/eFormAPI/eFormAPI.Web/Plugins
        #cp -av eform-angular-items-planning-plugin/eFormAPI/eFormAPI.Web/Plugins/ItemsPlanning eform-angular-frontend/eFormAPI/eFormAPI.Web/Plugins/ItemsPlanning
        #cp -av eform-angular-timeplanning-plugin/eFormAPI/eFormAPI.Web/Plugins/TimePlanning.Pn eform-angular-frontend/eFormAPI/eFormAPI.Web/Plugins/TimePlanning.Pn
        #cp -av eform-backendconfiguration-plugin/eFormAPI/eFormAPI.Web/Plugins/BackendConfiguration.Pn eform-angular-frontend/eFormAPI/eFormAPI.Web/Plugins/BackendConfiguration.Pn
        #cd eform-angular-frontend/eform-client && ../../eform-backendconfiguration-plugin/testinginstallpn.sh
        #../../eform-angular-items-planning-plugin/testinginstallpn.sh
        #../../eform-angular-timeplanning-plugin/testinginstallpn.sh
    - name: Build frontend
      run: dotnet build eform-angular-frontend/eFormAPI/eFormAPI.sln > dotnet_log 2>&1 &
    - name: NPM install
      run: cd eform-angular-frontend/eform-client && npm install
      if: steps.cache.outputs.cache-hit != 'true'
    - name: Create errorShots directory
      run: mkdir /home/runner/work/work-items-planning-container/work-items-planning-container/eform-angular-frontend/eform-client/errorShots
    - name: Pretest changes to work with Docker container
      run: sed -i 's/localhost/mariadbtest/g' eform-angular-frontend/eform-client/e2e/Constants/DatabaseConfigurationConstants.ts
    - name: Configuration testing
      run: cd eform-angular-frontend/eform-client && npm run testheadless
    - name: Change rabbitmq hostname
      run: docker exec -i mariadbtest mysql -u root --password=secretpassword -e 'update 420_SDK.Settings set Value = "my-rabbit" where Name = "rabbitMqHost"'
    - name: Plugin testing
      run: cd eform-angular-frontend/eform-client && npm run testheadlessplugin2${{matrix.test}}
    - name: Stop the newly build Docker container
      run: docker stop my-container
    - name: Get standard output
      run: |
        cat docker_run_log
        result=`cat docker_run_log | grep "Now listening on: http://0.0.0.0:5000" -m 1 | wc -l`
        if [ $result -ne 1 ];then exit 1; fi
    - name: The job has failed
      if: always()
      run: |
        cat docker_run_log
    - name: Archive screenshot artifacts
      if: ${{ failure() }}
      uses: actions/upload-artifact@v3
      with:
        name: error Screenshots
        path: |
          /home/runner/work/work-items-planning-container/work-items-planning-container/eform-angular-frontend/eform-client/errorShots/chrome*.png
        retention-days: 2
  test-dotnet:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Create docker network ðŸ–§
      run: docker network create --driver bridge --attachable data
    - name: Start MariaDB
      run: |
        docker pull mariadb:10.8
        docker run --name mariadbtest --network data -e MYSQL_ROOT_PASSWORD=secretpassword -p 3306:3306 -d mariadb:10.8
    - name: Sleep 15
      run: sleep 15        
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Build
      run: dotnet build eFormAPI/Plugins/BackendConfiguration.Pn/BackendConfiguration.Pn.sln
    - name: Unit Tests
      run: dotnet test --no-restore -c Release -v n eFormAPI/Plugins/BackendConfiguration.Pn/BackendConfiguration.Pn.Test/BackendConfiguration.Pn.Test.csproj